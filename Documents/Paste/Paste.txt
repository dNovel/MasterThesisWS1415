###Thesis 2014/2015:

#Stichworte und Informations-Paste.

##Brennende Fragen
- Datentypen für die Arbeit in C4d
  * Müssen Dateien beim Export konvertiert werden?
  * Brauchen wir einen extra Exporter?
- Muss ein Full Engine support bestehen oder reicht eine Projektstruktur welche die Binarys der Engine referenziert aus?
- Plugin oder Client Server Prinzip?
  * Hat das Plugin alle Funktionalität oder reicht es nur weiter an eine Tool Application?

##Aktuell
- In wie weit soll hier noch etwas Theoretisch untersucht werden?
  * Zu jeder Engine Use Cases etc?
- Sollen Anforderungen etc. formuliert werden?

## Stichworte / Keywords
- Keywords
  * Game Authoring / Production
  * System Design / for Games
  * Game Tool Development
  * Game Engine
  * Plugins for Cinema 4D
  * Game Asset Management
  * Version Control

- Extended Keywords
  * Game Development
  * Modelling Tool
  * IDE
  * Client Server Architecture
  * C#
  * .NET
  * Cinema 4D
  * Fusee Engine

## Phasen der Entwicklung des Tools
Nach Wihlidal.

- Planung
  * Eine Software soll es ermöglichen, dass Artists, Designer und Developer an ein und dem selben Projekt arbeiten können ohne die gewohnte Arbeitsumgebung (3D-Modellierungssoftware, IDE) zu verlassen und etwas komplett neues (Level-Editor) zu erlernen.
  * Die komplette Entwicklung und der Entwurf bedienen sich der FUSEE Engine.
  * Ziel ist es in Cinema 4D ein FUSEE Projekt anzulegen, zu speichern und es zu öffnen (In Form einer Szene, Level, Welt.). Weiterhin müssen "Assets" ins Spiel integriert werden können die von Artists, Designern und Entwicklern bearbeitet werden können.
  * Das Projekt sollte aus C4D heraus gebaut werden können.

  * Hier könnte man einen Hinweis auf die Entwicklungsmethoden von id Software geben. Möglicherweise wäre eine Erwähnung der Pre-Rage Zeiten sinnvoll.

- Analyse
  * Eine Stakeholderanalyse schafft klarheit, welche Parteien mit dem zu erstellenden Tool arbeiten müssen.
  * Die Game Engines sollten Kategorisiert werden. Hierzu ist ein "Gitternetz" aufzustellen.
  * Verschiedene Game Engines müssen darauf untersucht werden, wie die Arbeitsschritte in diesen zu erledigen sind. Jede Untersuchung sollte dokumentiert werden.
  * Es ist zuerst zu analysieren, welche Schritte für welche Art der Arbeit notwendig sind. Hierzu werden Usecases der verschiedenen Rollen und Aufgaben erstellt.

- Design
  * Aufgrund der erstellten Use Cases wird ein System Design erstellt.
  * Das Systemdesing sollte Roundtrips vermeiden
    * Hierzu können Partial Classes untersucht werden.
  * Es soll möglichst wenig "geparsed" oder "konvertiert" werden
  * Dateien sollen Version Control kompatibel bleiben (wenig bis keine Binarys)
  * Das Projekt muss Strukturiert sein
  * Eine Fusee Solution soll gehandelt werden können

- Implementierung
  * Die Software wird auf basis der FUSEE Engine und Cinema4D R16 erstellt.


##November 2014
- Kategorisierung von Engines an Hand einer Map
  * Kategoriern für die Map
    * Editor gebunden
      * Bezogen auf world, Level Editor
    * IDE gebunden
    * Lizenz
      * Frei
      * Kostenpflichtig
    * Programmiersprache/Scriptsprache
      * Eigenentwickelte Sprachen
      * Allgemeine Sprachen
    * Platform-Builds
      * Desktop
      * Mobile
      * Konsolen
      * Browser
    * Betriebsysteme für die Entwicklung
      * Dieser Punkt ist losgelöst von den Builds zu betrachten, da einige Engines einen Build nach Linux etc. unterstützen jedoch dort keine Entwicklungsumgebung bereit stellen.
    * Middleware Support
      * Welcher Support für Middleware ist gegeben?
      * Kann eigene Middelware eingefügt werden?
    * Erweiterbarkeit der Engine um eigene Software
      * Ist die Codebase einsehbar?
      * Ist die Codebase manipulierbar?

- Partial Classes
  * Angesehen/gelesen, scheint nützlich
  * Handelt sich um einen Compiler Vorgang
  * Generiert keinen neuen Code in dem Sinne, dass es einfach mehrere Anlaufstellen für das einbringen von eigenem Code bietet.

##November 21.2014
- Stakeholder analyse intern
  * Bei den Stakeholdern handelt es sich in erster Linie um Mitglieder des Teams welche durch die entwicklung des Tools u.ä. direkt betroffen sind.
  * Hierzu gehören in erster Linie
    * Artists
    * Engineers
    * Designer
  * Das bedeutet, diese Gruppen müssen bei der entwicklung eines Tools beachtet werden. Am besten wäre eine Rücksprache mit diesen Teammitgliedern und anschliessend eine analyse der Bedürfnisse für die jeweiligen Aufgabengebiete. Hierzu würde es sich empfehlen ein Gespräch zu führen und weiterhin einen praktischen Besuch am Arbeitsplatz zu vereinbaren.

##November 20.2014
- Akteure während der Entwicklung die mit der Engine und den Tools direkt in Berührung kommen.
  * Artist
    * Animator
    * World Builders
  * Engineer
    * Tools
    * Graphics
    * Network
    * AI
    * Sound
  * Designer
    * Level
    * Scripter
    * UI
  * QA Tester
- Allgemeine Anwendungsfälle die häufig vorkommen
  * Projekt anlegen
  * Projekt bearbeiten (Durch hinzufügen von Assets oder Funktionalität)
  * Projekt speichern
  * Projekt öffnen
  * Projekt bauen
-Getrennt nach Akteuren
  * Artist
    * Assets erstellen
    * Assets exportieren
    * Szenen bearbeiten
    * Szenen speichern
    * Szenen anlegen
  * Engineer
    * Code hinzufügen
    * Assets ansprechen
    * Tools erweitern
    * Szenen bearbeiten
  * Designer
    * Assets verändern
    * Szenen anlegen
    * Szenen verändern
    * Szenen speichern
- Subjekte (Systeme)
  * Engine / Codebase
    * Libraries
    * Middleware
    * Build System
  * IDE
    * Code bearbeitung
  * Asset Software
    * Bildbearbeitung
    * Modeling-Software
    * 3D-Verarbeitungssoftware
  * Projekt Handler
    * Hier in der Thesis die Software welche das Zusammenspiel der einzelnen Komponenten managed.



##November 11.2014
- Kategorien um die Engines einzusortieren
  * Editor pflicht / nicht enthalten
  * IDE frei wählbar? Vorgegeben?
  * Frei oder Kostenpflichtig
  * Programmiersprache/Scriptsprache proprietär (eigen, nur dort nutzbar) oder allgemein nutzbar
  * Platform-Builds (Desktop, Mobile, Browser, Konsolen)
  * Entwickeln auf allen Systemen? OS?
  * Middleware Support? Bereits integriert? (Enlighten, Havok)
- Use Cases abbilden
  * Text Beschreibung der einzelnen Use Cases
    * Jeden Use Case kurz abbilden
  * Projekt bezogen
    * Projekt anlegen
    * Projekt öffnen
    * Projekt speichern
    * Projekt bauen
  * In Projekt einsteigen
    * Projekt clonen etc.
  * Gleichzeitig an Projekt arbeiten
    * Model Datei importieren
    * Gleichzeitig an einem Objekt arbeiten
- Stakeholder analyse intern
  * Hierzu das Buch "Wilidahl" betrachten
- Der Prozess muss abgebildet werden
  * Hierzu sind die Use Cases und die visualisierung
    der Systemarchitektur nötig
- Systemarchitektur visualisieren
  * Welche Programme und Systeme sind beteiligt
  * Wie kann man neue Systeme dort integrieren
  * Alles auf Basis von Fusee und C4d betrachten
  * Generator für Projekt Dateien
    * Extern oder integriert?
  * Xpresso Schaltungen
  * Partial Classes in .NET


##November 10.2014
- Kategorisierung von Engines an Hand einer Kategorien "Map".
  * UE4
  * Unity
  * etc.
  * Die Map könnte wie folgt aufgebaut werden (Kriterien)
    * Editor based
    * Code based (Plugins etc)
    * IDE integriert oder frei
    * All in one package oder tool set
    * Open Source oder kommerziell
- Use Cases
  * Stelle ein System auf um Use Cases abzubilden
  * Kurze analyse der Stakeholder im Team
- Setze Prozessstruktur visuell um
    * Grafik
      * Interpretation der Funktion anhand einer Illustration
    * Kurze Beschreibung der Anwendung
      * Textuelle Beschreibung der Abläufe
- Partial Classes
  * Ansehen, verstehen
  * Beispiel aufsetzen

##Oktober 29.2014
- Game Authoring als neues Stichwort neben Tool Development
- Ein Zentraler Entwicklungsprozess während bzw. vor der Produktion
- Prämisse (Ziel der Arbeit)
  * Grafisches Werkzeug für Designer
  * IDE für Entwickler
  * Beide bleiben in ihrer bekannten Welt
  * Arbeiten trotzdem zusammen an einem Projekt
  * Projekt wird durch das Projekt selbst verwaltet
- Ein Prozess wird entwickelt
  * Konzeptionell
  * Später auch in der Implementierung
- Was soll erreicht werden?
  * Designer kann in 3D Modellierungssoftware beginnen ein Projekt aufzusetzen
  * Developer können das in einer IDE
  * Nicht vorgegeben wer anfängt und das Projekt aufzieht
  * Einstieg jederzeit mit dem eigenen Tool (IDE / 3D Software) möglich
  * Entwickler müssen nicht mit Modeller Tools arbeiten müssen
- Anwendungsfälle
  * Verschiedener Engines dann auch untersuchen
  * Bedeutet: Was möchte man als Designer tun? Als Entwickler?
    * Statische Objekte (Level)
    * Interaktive Objekte
    * Etwas kontrollieren (Steuern)
    * Irgendwas hinterlegen (Objekte etc.) dann instanziieren
- Hierarchien
  * Von Wurzel Objekt Zugriff auf Parameter des Baumes
  * 2D Systeme machen es vor - Code schachteln?
  * Das 2D System auf 3D Szenen übertragen
  * Hier das Abhängigkeitssystem von WPF ähnlichen Systemen anwenden und untersuchen
  * View -> Group -> Textfield -> Button -> Presentation etc.
- XPresso
  * Könnte zum Verschalten von Eigenschaften benutzt werden
  * Oberobjekte reichen etwas nach außen bzw. unten weiter.
  * Können vom Entwickler angesprochen werden
- Partial Classes für die Code Generierung
  * Round Trip vermeiden (herumgeparse zwischen verschiedenen Sprachen und Systemen)
  * Klassen auf zwei Dateien aufteilen
  * Partial Methoden als weitere Hilfe um keine großen Mengen von unnützem Code zu erzeugen
  * Klasse wird dann vom Exporter generiert.
  * Entwickler erweitert die Klasse für sich um Funktionen
  * Compiler Trick (mechanisch)
- Export
  * Was findet statt beim Export?
  * Was wird genau erzeugt?
  * Solution wird geupdated
  * Projekt Struktur muss bestehen bleiben und beachtet werden
    * Asset Ordner, Src Ordner, DLLs etc.
  * Applikationsklasse als oberste Ebene bzw. als Einstiegspunkt
  * Wenn kein Projekt vorhanden ist muss eines generiert werden
  * Bei Update einer Solution
    * Assets behalten
    * Solution neu schreiben (?)
  * Für weiteres (erstmal nicht?)
    * Mehrere Szenen in ein Projekt integrieren
    * Im Ausblick eventuell ansprechen
    * Wie gehen Devs und Designer damit um?

##Oktober 28.2014
- Verschränkung von Code und Content
- Übertragen von 3D Szenen Graphen auf Projekt Strukturen in FUSEE
- Export aus Cinema 4D in Fusee Strukturen
- Umsetzung von Baum Strukturen in FUSEE Szenen
- Aufbau von (einfachen) FUSEE Szenen aus Cinema 4D heraus.
- Model View Controller Pattern (entfernt)
- Trennung von Struktur und Präsentation (Aus Design Tips im Web Design) URL: http://toscho.de/2009/trennung-inhalt-layout/
- Modularität, im Bezug auf die Wiederverwertbarkeit von Code Bausteinen. (Herunter gebrochen auf Klassen)
- Trennung von Game Engine (Unterbau) zum Developer Interface Editor
  * Sony Level Editor welcher Open Source ist
    * Unterstützt aktuell leider nur Direct X
- Welche Ansprüche werden an Entwickler gestellt?
  * Scripting? (Code in C4d anbringen? Erstmal wohl eher nicht)
  * Design?
  * Selbst Programmierer?
- Trennung nach Level Editor und Entwickler IDE
  * Wie kann man IDE definieren?
  * Ab wann ist etwas ein Level Editor?
  * Was sind Developer Tools?
- Wie kann man diese Tools klassifizieren?
  * Hierzu sollte ein Vergleich angestellt werden?
  * Eine Einordnung muss erfolgen.
  * Dazu muss ein spezielles "Raster" erzeugt werden.
- Welche Engines werden betrachtet?
  * Unreal Engine 4
    * Hierzu ist der Source Code vorhanden.
    * Die Engines ist an der Hochschule Lizenziert.
    * Eventuell findet sich im Code etwas?
    * Auf welchen Technologien basiert das System? XML?
  * Unity
    * falls möglich?
    * setzt auf Mono Develop / Xamarin.
  * Android SDK
    * Bietet eine XML Code verschränkung auf Java Basis.
    * Designer arbeiten in WYSIWYG Editoren.
    * Programmierer können UI Elemente als Code und XML hinterlegen.
  * Qt Framework
    * Falls nützlich.
  * Cryengine
    * Falls nützlich.
- Tool Development (diese Richtung könnte vielversprechend sein)
  * Hier könnten verschiedene Ansätze betrachtet werden.
- Eventuell kann man mit Game Developern sprechen welche Möglichkeiten geboten sein sollen.
  * Am besten eventuell mit Designern sprechen
    * Vielleicht mal mit Ankathrin Müller oder Julian Jorda oder Stephanie Braun etc. sprechen.
    * Überlegungen anstellen wie so etwas minimiert werden kann?
- Erstellen eines Konzeptes für eine Software
  * Wie kann man verschiedene Dinge in c4d koppeln?
  * Was für ein Softwarekonstrukt muss man dafür schreiben?
  * Wie werden Klassen repräsentiert und konvertiert?
  * Wird in Fusee ein Format gezogen oder wird ein Projekt (VS13 etc.) erstellt?
  * Müssen GameObject Klassen etc geschaffen werden?
  * Ähnlich Unity Szenen "starten".
    * Aus VS13 die Szene starten. Zusammengebaut wurde sie in C4d.
    * Die Szene enthält verschiedene Klassen die an Objekten hängen? Vice versa.
    * Die Szene wird immer in C4d editiert und nur nach "Fusee" konvertiert.
    * Eventuell müsste hier ein Container geschaffen werden? (Zum Transport)
      * Oder Klassen müssten einfach in C4d keine oder nur wenig Funktion bieten?



#Linksammlung.

Übersichten:
Sony Level Editor         https://github.com/SonyWWS/LevelEditor
Cryengine                 http://cryengine.com/
Unreal Engine 4           https://www.unrealengine.com/
Unity 3D                  http://unity3d.com/

Web sequence diagrams     https://www.websequencediagrams.com

#Artikel Foren Posts etc:
http://www.gamedev.net/page/resources/_/technical/apis-and-tools/level-creation-concerns-with-unity-r3325
